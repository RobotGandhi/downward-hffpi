(:policy
(:booleans (0 "b_nullary(moving)"))
(:numericals (0 "n_concept_distance(c_primitive(robot-pos,0),r_primitive(connected,0,1),c_and(c_primitive(source,0),c_not(c_some(r_primitive(source,0,1),c_primitive(group-painted,0)))))") (1 "n_concept_distance(c_thesis(c_diff(c_some(r_primitive(part-of,0,1),c_primitive(painting,0)),c_some(r_primitive(painted,0,1),c_primitive(painting,0))),r_primitive(connected,0,1),c_primitive(source,0),c_some(r_primitive(painted,0,1),c_primitive(painting,0)),c_primitive(robot-pos,0)),r_restrict(r_primitive(connected,0,1),c_some(r_primitive(painted,0,1),c_primitive(painting,0))),c_primitive(robot-pos,0))") (2 "n_concept_distance(c_some(r_primitive(remaining-cells,1,0),c_primitive(painting,0)),r_primitive(next,1,0),c_one_of(n0))"))
(:rule (:conditions (:c_b_pos 0) (:c_n_gt 0)) (:effects (:e_n_dec 0)))
(:rule (:conditions (:c_b_pos 0) (:c_n_eq 0)) (:effects (:e_b_neg 0)))
(:rule (:conditions (:c_b_neg 0) (:c_n_gt 1) (:c_n_gt 2)) (:effects (:e_n_dec 1)))
(:rule (:conditions (:c_b_neg 0) (:c_n_eq 1) (:c_n_gt 2)) (:effects (:e_n_dec 2)))
(:rule (:conditions (:c_b_neg 0) (:c_n_eq 2)) (:effects (:e_b_pos 0)))
)

